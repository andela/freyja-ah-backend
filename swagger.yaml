swagger: '2.0'
info:
  version: '1.0'
  title: Customer Service Learning Community
  description: Create a community of like minded customer service skills enthusiast to foster inspiration and innovation by leveraging the modern web.
schemes:
  - 'https'
  - 'http'
paths:
  /users:
    post:
      description: Creates a new user
      summary: Signup
      tags:
        - 'Users'
      operationId: UsersPost
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: firstName
          in: formData
          type: string
          description: 'User firstname'
          required: true
        - name: lastName
          in: formData
          type: string
          description: 'User lastname'
          required: true
        - name: email
          in: formData
          type: string
          description: 'unique email'
          required: true
        - name: userName
          in: formData
          type: string
          description: 'username'
          required: true
        - name: password
          in: formData
          minLength: 8
          type: string
          description: 'user password'
          required: true
        - name: gender
          in: formData
          type: string
          description: 'user gender'
          required: true
      responses:
        201:
          description: 'user created succesfully'
        422:
          description: 'invalid input'
  /users/login:
    post:
      description: Login an existing User
      summary: Signin
      tags:
        - Users
      operationId: UsersLoginPost
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: email
          in: formData
          required: true
          type: string
          description: 'user registered email'
        - name: password
          in: formData
          required: true
          type: string
          description: 'user password'
      responses:
        200:
          description: 'status code'
          schema:
            type: 'object'
            items:
              status: 200
              message: 'login was sucessful'
              $ref: '#/definitions/User'
              token:
                type: 'string'
  /user/5:
    get:
      description: Get a specific user
      summary: Get a specific user
      tags:
        - Users
      operationId: User5Get
      produces:
        - application/json
      responses:
        200:
          description: 'User returned successfully'
    put:
      description: Update an existing user details
      summary: Update a specific user information
      tags:
        - Users
      operationId: User5Put
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: firstName
          in: formData
          required: false
          type: string
          description: 'User firstname'
        - name: lastName
          in: formData
          required: false
          type: string
          description: 'User lastname'
        - name: email
          in: formData
          required: false
          type: string
          description: 'unique email'
        - name: userName
          in: formData
          required: false
          type: string
          description: 'username'
        - name: industry
          in: formData
          required: false
          type: string
          description: 'user place of work'
        - name: age
          in: formData
          required: false
          type: integer
          format: int32
          description: 'user age'
        - name: employed
          in: formData
          required: false
          type: boolean
          description: 'employment status'

      responses:
        200:
          description: 'user details updated successfully'
  /users/reset:
    post:
      description: Reset a user's password
      summary: Reset Password
      tags:
        - Users
      operationId: ResetUserPassword
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: email
          in: formData
          required: true
          type: string
          description: 'user registered email'
      responses:
        202:
          description: 'status code'
  /users/change-password:
    post:
      description: Change user password
      summary: Change Password
      tags:
        - Users
      operationId: ChangePassword
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
          description: 'user new password'
      responses:
        202:
          description: 'status code'
  /profiles:
    put:
      description: Edit a new User's Profile
      summary: Edit a profile
      tags:
        - 'Profile'
      operationId: EditUserProfile
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: dateOfBirth
          in: formdata
          type: string
          description: 'Users date of birth'
          required: true
        - name: phoneNumber
          in: formdata
          type: string
          description: 'User phone number'
          required: true
        - name: isEmployed
          in: formdata
          type: boolean
          description: 'User employment status'
          required: true
        - name: bio
          in: formdata
          type: string
          description: 'brief description of user'
          required: true
        - name: yrsOfExperience
          in: formdata
          type: integer
          description: 'Number of years user has worked'
          required: true
        - name: image
          in: formdata
          type: string
          description: 'User portrait'
        - name: instagram
          in: formdata
          type: string
          description: 'User instagram handle'
        - name: twitter
          in: formdata
          type: string
          description: 'User twitter handle'
        - name: linkedIn
          in: formdata
          type: string
          description: 'User linkedIn handle'
      responses:
        202:
          description: 'Operation successful'
          schema:
            type: 'object'
            items:
              status: 202
              message: 'Profile was successfully edited'
              $ref: '#/definitions/Profile'
        401:
          description: 'No Authentication provided'
          schema:
            type: 'object'
            items:
              status: 401
              error: 'No Authentication Token Provided'
        422:
          description: 'Invalid request or missing required information'
          schema:
            type: 'object'
            items:
              status: 422
              error:
<<<<<<< HEAD
                type: "array"
    get:
      description: Get a single User's Profile
      summary: Get a profile
      tags:
        - 'Profile'
      operationId: getUserProfile
      produces:
        - application/json
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - name: userId
          in: params
          type: integer
          description: 'Users Id'
          required: true
      responses:
        200:
          description: 'Operation successful'
          schema:
            type: "object"
            items:
              status: 200
              $ref: "#/definitions/Profile" 
        401:
          description: 'No Authentication provided'
          schema:
            type: "object"
            items:
              status: 401
              error: "No Authentication Token Provided"
        404:
          description: 'User whose Id was supplied does not exist'
          schema:
            type: "object"
            items:
              status: 404
              error: 'This user does not exist'
=======
                type: 'array'
>>>>>>> chore(user):user signin validation
  /modules:
    get:
      description: get all modules
      summary: get modules
      tags:
        - Modules
      operationId: GetModules
      produces:
        - application/json
      parameters:
        - name: x-access-token
          in: header
          required: true
          type: string
      responses:
        200:
          description: 'Modules returned successfully'
  /modules/1:
    get:
      description: get a specific module
      summary: get single module
      tags:
        - Modules
      operationId: GetModule
  /test/module:id:
    get:
      description: get module test
      summary: get test
      tags:
        - Test
      operationId: GetTest
      produces:
        - application/json
      responses:
        200:
          description: 'Success'
tags:
  - name: Users
    description: User routes to signup, login, update and get specific User, reset password
  - name: Profile
    description: For all profile operations, creating, updating and deleting user profiles.
  - name: Modules
    description: User routes to get all modules
  - name: Test
    description: Route to get test by module Id
definitions:
  User:
    type: 'object'
    properties:
      id:
        type: 'integer'
      userName:
        type: 'string'
      firstName:
        type: 'string'
      lastName:
        type: 'string'
      email:
        type: 'string'
  Module:
    type: 'object'
    properties:
      id:
        type: 'integer'
      name:
        type: 'string'
      description:
        type: 'string'
  Profile:
    type: 'object'
    properties:
      age:
        type: 'integer'
      phoneNumber:
        type: 'string'
      gender:
        type: 'string'
      yrsOfExperience:
        type: 'integer'
      bio:
        type: 'string'
      industry:
        type: 'string'
      image:
        type: 'string'
      progress:
        type: 'integer'
      isEnrolled:
        type: 'boolean'
      isEmployed:
        type: 'boolean'
      isCertified:
        type: 'boolean'
      instagram:
        type: 'string'
      facebook:
        type: 'string'
      twitter:
        type: 'integer'
      linkedIn:
        type: 'string'
<<<<<<< HEAD

=======
>>>>>>> chore(user):user signin validation
externalDocs:
  description: 'Find out more about Swagger'
  url: 'http://swagger.io'
